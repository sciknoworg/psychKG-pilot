You are an expert in psychology and computational knowledge representation. Your task is to extract key scientific information from psychology research articles to build a structured knowledge graph.

The knowledge graph aims to represent the relationships between psychological **topics or constructs** and their associated **measurement instruments or scales**. Specifically, for each article, extract information in the form of triples that capture:

1) The psychological topic or construct being studied
2) The measurement instrument or scale used to assess it
3) A brief justification (1–3 sentences) from the article text supporting this measurement link

Guidelines:
- Extract meaningful **phrases** (not full sentences or vague descriptions) for both `topic_or_construct` and `measured_by`, suitable for inclusion in a knowledge graph.
- Include a short justification for each extraction that clearly supports the connection.
- If the article does not discuss psychological constructs and how they are measured (e.g., no mention of constructs, instruments, or scales), return an empty list `[]`.

Input Paper:
"""



Introduction
Reinforcement learning algorithms can be broadly grouped into those that learn an internal model of their environment, called model-based algorithms, and those that do not, called model-free algorithms 
[7]
. Humans are thought to express both model-based and model-free decision making strategies 
[3]
, and an over-reliance on model-free control is implicated in conditions such as obsessive-compulsive disorder and addiction 
[5,
6,
8]
. Contributions of each strategy to decision making can be measured using a two-step (or "two-stage") task introduced by 
[1]
. In this task, each of two actions in a first stage leads preferentially to a different state in a second stage. Each of four possible actions in the second stage has an independently varying probability of returning a reward, so that continual learning is required to perform well. The pattern of decisions taken at the first stage following reward or lack thereof, and following a common or rare first-to-second-stage transition, is indicative of the use of a model-based or model-free decision making strategy. Here, I introduce a module of functions that integrates with the popular library jsPsych 
[2]
 to enable the easy creation and deployment of the two-step task for web-based research. The source code and full documentation for this tool are available at https://github.com/kinleyid/jspsych-2st and a demonstration of the task can be found at https://kinleyid.github.io/rsrch/jspsych-2st/full-example.html. Below, I offer a brief overview of the functionality of the tool.


Description of the tool
Using the jsDelivr content delivery network, it is possible to load the latest version of the tool (v1.0.0 at the time of writing) onto a webpage directly from GitHub: <script src="https://cdn.jsdelivr.net/gh/kinleyid/jspsych-2st@v1.0.0/2st.js"></script>
This creates a single JavaScript object, called two_step_task, containing a series of functions for producing jsPsych trial objects that can be added to an experiment timeline (see https://www.jspsych.org/overview/timeline). This enables the two-step task to be easily added to jsPsych-based experiments that include other tasks and questionnaires. The tool relies on the jsPsychCallFunction, jsPsychCanvasKeyboardResponse, and jsPsychInstructions plugins, meaning that these must also be loaded. Participants are initially familiarized with step two of the task and the reward probabilities are fixed. This introduces participants to the idea that different step two actions are associated with different probabilities of returning a reward.
A single trial of the two-step task, consisting of both the first-and second-step decisions (along with transition/reward animations and background computations to update reward probabilities, etc.) can be created using a function called single_trial(). This means that an entire experiment's worth of trials can be created in a few lines:
var trials = { timeline: [two_step_task.trials.single_trial()], repetitions: 100 } A set of interactive instructions for participants, in which they are familiarized first with the second step of the task and then with the first, can be created using the function interactive_instructions() 
(Fig. 1)
. These are inspired by the instructions of the original task 
[1]
. However, performance on the two-step task is sensitive to instructions 
[4]
, so users may want to customize these. Custom instructions are created using a series of functions that give users lowerlevel control over each sequential component of a trial. For example, step_1() creates the first step, transition() computes the step-1-to-step-2 transition, animation() animates this transition, etc. The documentation gives a full list of such functions. These enable participants to be familiarized with each component of the task separately.
A set of Tibetan characters similar to those used by 
[1]
 are included with the tool and are used by default. However, these can easily be customized by the user along with a range of other parameters controlling the timing of the experiment and participant keyboard input. The full list of parameters can be found in the documentation on GitHub.
The data produced by the two-step task is stored in a jsPsych.data property called two_step_task_info. This property contains all of the relevant information about the most recent two step task trial (e.g., whether the step-one-tostep-two transition was common or rare, the choice and RT in steps one and two, etc.). If the data is exported to a CSV table, two_step_task_info appears as a column with JSON-formatted entries. An example CSV table is available on the GitHub page where this tool is hosted, along with an R script for parsing the data and performing the standard sequential analysis, in which the probability of repeating the last step 1 action is modelled using logistic regression as a function of the previous trial's reward and transition.
Figure 1 :
1
Screenshot from the default interactive instructions created by the function interactive_instructions.














Model-based influences on humans' choices and striatal prediction errors




D
Nathaniel






Daw






J
Samuel






Ben
Gershman






Peter
Seymour






Raymond J
Dayan






Dolan








Neuron




69


6
















jspsych: A javascript library for creating behavioral experiments in a web browser




Joshua R De
Leeuw








Behavior research methods




47
















Goals and habits in the brain




J
Ray






Peter
Dolan






Dayan








Neuron




80


2
















Humans primarily use model-based inference in the two-stage task




Carolina
Feher Da Silva






Todd A
Hare








Nature Human Behaviour




4


10
















Arbitration between action strategies in obsessive-compulsive disorder




Patricia
Gruner






Alan
Anticevic






Daeyeol
Lee






Christopher
Pittenger








The Neuroscientist




22


2
















Pathologies of precision: A bayesian account of goals, habits, and episodic foresight in addiction




Isaac
Kinley






Michael
Amlung






Suzanna
Becker








Brain and Cognition




158


105843














Reinforcement learning: An introduction




S
Richard






Andrew
G
Sutton






Barto








MIT press












Disorders of compulsivity: a common bias towards learning habits




Valerie
Voon






Katherine
Derbyshire






Chistian
Rück






A
Michael






Yulia
Irvine






Jesper
Worbe






Enander






R
N
Liana






Claire
Schreiber






Naomi
A
Gillan






Barbara
J
Fineberg






Sahakian








Molecular psychiatry




20


3

















"""

Output: Provide your response as a JSON list in the following format:

[
  {
    "topic_or_construct": "...",
    "measured_by": "...",
    "justification": "..."
  },
  ...
]